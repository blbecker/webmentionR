name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Linter
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Tests with Coverage
        run: |
          mkdir -p coverage
          go test -coverprofile=coverage/coverage.out ./...

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/coverage.out

  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0

      - name: Set Version Output
        run: echo "VERSION=${{ steps.gitversion.outputs.fullSemVer }}" >> $GITHUB_ENV

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, calculate-version, gitleaks]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build CLI Binary
        run: |
          mkdir -p dist
          go build -o dist/mentionR

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cli-binary
          path: dist/mentionR

  release:
    name: Release on Main
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: cli-binary
          path: dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release ${{ env.VERSION }}"
          body: "Automated release from CI workflow."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/mentionR
          asset_name: mentionR
          asset_content_type: application/octet-stream
